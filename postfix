#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>  // For isdigit()
#include <string.h> // For string manipulation functions

#define MAX 50  // Maximum size of the stack

// Stack structure
struct Stack {
    int arr[MAX];
    int top;
};

// Initialize the stack
void initStack(struct Stack* stack) {
    stack->top = -1;  // Indicates an empty stack
}

// Check if the stack is full
int isFull(struct Stack* stack) {
    return stack->top == MAX - 1;
}

// Check if the stack is empty
int isEmpty(struct Stack* stack) {
    return stack->top == -1;
}

// Push an element onto the stack
void push(struct Stack* stack, int value) {
    if (isFull(stack)) {
        printf("Stack Overflow! Cannot push %d\n", value);
    } else {
        stack->arr[++(stack->top)] = value;
    }
}

// Pop an element from the stack
int pop(struct Stack* stack) {
    if (isEmpty(stack)) {
        printf("Stack Underflow! Cannot pop.\n");
        return -1;
    } else {
        return stack->arr[stack->top--];
    }
}

// Function to perform arithmetic operations
int applyOperator(int operand1, int operand2, char operator) {
    switch (operator) {
        case '+':
            return operand1 + operand2;
        case '-':
            return operand1 - operand2;
        case '*':
            return operand1 * operand2;
        case '/':
            if (operand2 != 0) {
                return operand1 / operand2;
            } else {
                printf("Division by zero error!\n");
                exit(1);
            }
        default:
            printf("Invalid operator: %c\n", operator);
            exit(1);
    }
}

// Function to evaluate a postfix expression
int evaluatePostfix(char* expression) {
    struct Stack stack;
    initStack(&stack);

    for (int i = 0; expression[i] != '\0'; i++) {
        if (expression[i] == ' ') continue;  // Ignore spaces

        if (isdigit(expression[i])) {
            // Convert the character to an integer and push it to the stack
            int num = 0;
            while (isdigit(expression[i])) {
                num = num * 10 + (expression[i] - '0');
                i++;
            }
            i--;  // Adjust the index to avoid skipping a character
            push(&stack, num);
        } else {
            // If an operator is encountered, pop two operands and apply the operator
            int operand2 = pop(&stack);
            int operand1 = pop(&stack);
            int result = applyOperator(operand1, operand2, expression[i]);
            push(&stack, result);
        }
    }

    // The result should now be at the top of the stack
    return pop(&stack);
}

int main() {
    char expression[MAX];
    printf("Enter a postfix expression (without spaces between operands and operators): ");
    fgets(expression, MAX, stdin);  // Read the expression from user input

    // Evaluate the postfix expression
    int result = evaluatePostfix(expression);

    printf("Result of the postfix expression: %d\n", result);
    
    return 0;
}
